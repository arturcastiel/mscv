function [ coarseElemCenter, coarse_interface_center, coarse_strips, boundRegion, intRegion, GlobalBoundary, bcoarse_strips] = alpreMsRB(npar,coarseneigh, centelem, ...
 coarseelem,coarseblockcenter,exinterface,exinterfaceaxes, multiCC)    
%UNTITLED2 Summary of this function goes here
%   Detailed explanation goes here
%finding neighbors 
global intCoord elem coord inedge bedge esurn1 esurn2 elemloc edgesOnCoarseBoundary intinterface polyReg cReg



coarseElemCenter = zeros(npar,1);
tol = 10^-4;
struct.RelTol = tol;

%% recalculate centers
    for ii = 1:npar
        ref = elemloc == ii;
        center_point = weiszfeld(centelem(ref,1:2));
        ref(ref) = minDis(center_point , centelem(ref,1:2));
        coarseElemCenter(ii) = find(ref);
    end
    
%% finding edge that represents the interface between two coarse volumes
    ref = intCoord(:, 3) == 2;
    points = intCoord(ref, 1:2);
    coarse_interface_center = zeros(size(points, 1), 1);
    p1 = coord(inedge(edgesOnCoarseBoundary,1),1:2);
    p2 = coord(inedge(edgesOnCoarseBoundary,1),1:2);
    edge_center_point = (p1+p2)./2;
    for ii = 1:size(points, 1)
       edge_ref =  minDis(points(ii,:), edge_center_point);
       coarse_interface_center(ii) = edgesOnCoarseBoundary(edge_ref);
    end
    
%% creating the coarse path connecting two coarse volumes
    coarse_element_bridge = elemloc(inedge(coarse_interface_center,3:4));
    coarse_element_target = inedge(coarse_interface_center,3:4);
    
    
%% moving centers to comply with lorens bc    
    bcflag = true;
    
    if bcflag == 1
        % moving center of coarse volumes
        for ii = 1:npar
           int_sum = sum(coarseneigh(ii,end-3:end));
           if int_sum == 1
               ref = (intCoord(:,3) == 3) & (intCoord(:,4) == ii);
               point = intCoord(ref,1:2);
               cref = elemloc == ii;
               cref(cref) = minDis(point, centelem(cref,1:2));
               coarseElemCenter(ii) = find(cref);               
           elseif int_sum ==2
               ref = (intCoord(:,3) == 4) & (intCoord(:,4) == ii);
               point = intCoord(ref,1:2);
               cref = elemloc == ii;
               cref(cref) = minDis(point, centelem(cref,1:2));
               coarseElemCenter(ii) = find(cref);               
           end  
        end
        % moving center of interfces
        all_boundary_nodes = unique(bedge(:,1:2));
        bcoarse = any(coarseneigh(:,end-3:end),2);
        bEdges = any(ismember(inedge(edgesOnCoarseBoundary,1:2),all_boundary_nodes),2);
        for ii = 1:size(coarse_element_bridge,1)
           flag = all(bcoarse(coarse_element_bridge(ii,:)));
           if flag == 1
              left =  coarse_element_bridge(ii,1);
              right =  coarse_element_bridge(ii,2);
              %ref1 = all(ismember(elemloc(inedge(edgesOnCoarseBoundary,3:4)),[left,right]),2);
              aux = elemloc(inedge(edgesOnCoarseBoundary,3:4));
              ref1 = (aux(:,1) == left) & (aux(:,2) == right);
              ref2 = (aux(:,2) == left) & (aux(:,1) == right);
              ref = (ref1 | ref2) &  bEdges;
              if sum(ref) ~= 0
                  if all(elemloc(inedge(edgesOnCoarseBoundary(ref),3:4)) == coarse_element_bridge(ii,:)) == 1
                      coarse_element_target(ii,:) = inedge(edgesOnCoarseBoundary(ref),3:4);
                  else
                      coarse_element_target(ii,1) = inedge(edgesOnCoarseBoundary(ref),4);
                      coarse_element_target(ii,2) = inedge(edgesOnCoarseBoundary(ref),3);
                  end
              end
              
           end
         
            
        end
        
        
    end    

%% creat coarse path center-nodes boundary for those coarse cells located on the boundaries of the physical domain
    boundaryTarget = zeros(npar,1);
    numBoundary = sum(coarseneigh(:,end-3:end), 2);
    bedge_vol = unique(bedge(:,3));
    for ii = 1:npar
        if numBoundary(ii) == 1
            edges_ref = exinterface{ii};
            edge_nodes = bedge(edges_ref,1:2);
            center_bedges =  0.5*(coord(edge_nodes(:,1),1:2) + coord(edge_nodes(:,2),1:2));
            average_point = mean(center_bedges);
            target_edge = minDis(average_point, center_bedges);
            boundaryTarget(ii) = bedge(edges_ref(target_edge),3);     
        elseif numBoundary(ii) == 2
            ref =  (intCoord(:,3) == 4) & (intCoord(:,4) == ii);
            center = intCoord(ref,1:2);
            center_bedges = centelem(bedge_vol,1:2);            
            target_vol= minDis(center, center_bedges);
            boundaryTarget(ii,:) = bedge_vol(target_vol);  
        end
    end

    

%% creating the distances between adjacencies elements    
    P1 = centelem(inedge(:, 3),1:2);
    P2 = centelem(inedge(:, 4),1:2);
    dist = vecnorm(P2-P1, 2, 2) ;


%% increasing weights for strips on the edgesOnCoarseBoundary
    vol_cb = unique(inedge(edgesOnCoarseBoundary,3:4));
    bad_ref = any(ismember((inedge(:,3:4)), vol_cb),2);
    %
    
%% creating the distances
    dist(:) = 1;
    dist_weight = dist;
    
    dist_weight(bad_ref) = 3000*dist(bad_ref);
%     G = graph(inedge(:,3),inedge(:,4), dist_weight);
    %G = graph(inedge(:,3),inedge(:,4));

    
    
    
%% finding the shortest path
    coarse_strips = cell(size(coarse_element_bridge,1),1);
    half_strips = cell(size(coarse_element_bridge,1),2);
    
    for ii = 1:npar
        for jj = 1:size(coarse_strips,1)
        
            flag = ismember(coarse_element_bridge(jj,:), ii);
            if (flag(1) == 1)  | (flag(2) == 1)
                center = coarseElemCenter(ii);
                flag2 = (elemloc(coarse_element_target(jj,:))' == ii);
                target = coarse_element_target(jj,flag2);
                p1 = centelem(center,1:2);
                p2 = centelem(target,1:2);                
                easy_dist = all(ismember( inedge(:,3:4), find(lineCross(1:size(elem,1), p1,p2))),2);
                ldist = dist;
                ldist(easy_dist) = ldist(easy_dist) * 0.001;       
                
                lref = (elemloc == ii);
                transvec = find(lref);
                transback = zeros(size(elem,1),1);
                transback(transvec) = 1:size(transvec,1);
                edge_ref = all(ismember( inedge(:,3:4), transvec),2);
                auxmat = transback(inedge(edge_ref,3:4));
                G = graph(auxmat(:,1), auxmat(:,2), ldist(edge_ref));
                path = shortestpath(G, transback(center), transback(target));
                path = transvec(path);
                half_strips{jj, flag} = path;
            end         
        end
    end
    
    for ii = 1:size(coarse_strips,1)
        coarse_strips{ii} = vertcat(half_strips{ii,:})';
    end
    

%% finding the shortest path for boundary elements

bcoarse_strips = cell(npar,1);
if bcflag == 0
    for ii = 1:npar
        if numBoundary(ii) > 0
            center = coarseElemCenter(ii);
            target = boundaryTarget(ii);
            p1 = centelem(center,1:2);
            p2 = centelem(target,1:2);                
            easy_dist = all(ismember( inedge(:,3:4), find(lineCross(1:size(elem,1), p1,p2))),2);
            ldist = dist;
            ldist(easy_dist) = ldist(easy_dist) * 0.001;       
            lref = (elemloc == ii);
            transvec = find(lref);
            transback = zeros(size(elem,1),1);
            transback(transvec) = 1:size(transvec,1);
            edge_ref = all(ismember( inedge(:,3:4), transvec),2);
            auxmat = transback(inedge(edge_ref,3:4));
            G = graph(auxmat(:,1), auxmat(:,2), ldist(edge_ref));
            path = shortestpath(G, transback(center), transback(target));
            bcoarse_strips{ii}= transvec(path)';
        end
    end
end



% if bcflag == 0
%     bcoarse_strips = cell(npar,2);
%     for ii = 1:npar
%         center = coarseElemCenter(ii);
%         strip = [];
%         if  numBoundary(ii) == 1
%             target1 = boundaryTarget(ii,1);
%             strip1 = shortestpath(G,center,target1);
%             strip1 = setdiff(strip1, center1);
%             strip = [strip1];
%             bcoarse_strips{ii,1} = strip;
%         elseif  numBoundary(ii) == 2
%             target1 = boundaryTarget(ii,1);
%             target2 = boundaryTarget(ii,2);
%             strip1 = shortestpath(G,center,target1);
%             strip2 = shortestpath(G,center,target2);
%             strip1 = setdiff(strip1, center);
%             strip2 = setdiff(strip2, center);
%             bcoarse_strips{ii,1} = strip1;
%             bcoarse_strips{ii,2} = strip2;
%         end
%         
%     end
% end
%     
 %% finding boundary regions
    boundRegion = cell(npar,1);
    coarse_brige = sort(coarse_element_bridge,2);
    for ii=1:npar
        celsur = find(coarseneigh(ii,1:npar));
        cnpar = [];
        for jj = celsur
            celsur_local = intersect(celsur, find(coarseneigh(jj,1:npar)));
            
            celsur_local_boundary =  coarseneigh(celsur_local, end-3:end);
            cf =  any(coarseneigh(ii, end-3:end));
            all_par = sort([jj * ones(size(celsur_local))' , celsur_local'], 2);
            cnpar = unique([cnpar; all_par], 'rows');
            for ff = 1:size(celsur_local_boundary,1)
                if (sum(celsur_local_boundary(ff,:)) > 0) & (cf == 1)
                     boundRegion{ii} =  unique([boundRegion{ii}, bcoarse_strips{celsur_local(ff),1}]);
                end
            end            
        end            
        for jj = 1:size(cnpar,1)
            ref = ismember(coarse_brige, cnpar(jj,:), 'rows');
            boundRegion{ii} = unique([boundRegion{ii}, coarse_strips{ref}]); 
        end
    end
      GlobalBoundary = false(size(elem,1),1);
      ref = unique(horzcat(boundRegion{:}));
      GlobalBoundary(ref) = true;
      intRegion = [];
    
% % % %     if bcflag == 0
% % % %          for ii =1:npar
% % % %              boundRegion{ii} = union(boundRegion{ii},  bcoarse_strips{ii})';             
% % % %          
% % % %          end
% % % %     end
%% Creating interaction Region

intRegion = cell(npar,1);

polyReg = cell(npar,1);
cReg = cell(npar,1);


for ii = 1:npar
    all_el = union(find(coarseneigh(ii, 1:npar)), ii);
    cand_el = ismember(elemloc,all_el);
    cand_el(boundRegion{ii}) = false;
    ref = all(ismember(inedge(:,3:4), find(cand_el)),2);
    auxmat = inedge(ref,3:4);
    transvec = unique(auxmat);
    transback = zeros(size(elem,1),1);
    transback(transvec) = 1:size(transvec,1);
    auxmat = transback(auxmat);
    G = graph(auxmat(:,1), auxmat(:,2));
    con_comp = conncomp(G);
    ref_el = (con_comp == transback(coarseElemCenter(ii)));
    intRegion{ii} = transvec(find(ref_el);
end


% for ii = 1:npar
%     ncenter= coarseneigh(ii,1:end-4);
%     disp(ii)
%     disp(['The graph type of' num2str(ii) ' is: '])
%     if ii == 15
%         1
%     end
%     [xv,yv, mpath] = createPolygon(boundRegion{ii}, coarseElemCenter(ncenter)', dist);
%     if sum(coarseneigh(ii,end-3:end)) == 2
%         ref = (intCoord(:,3) == 4) & (intCoord(:,4) == ii);
%         fix_point = intCoord(ref,1:2);
%         lflag = true;
%         xv = [xv; fix_point(1)];
%         yv = [yv; fix_point(2)];
%     end
%     polyReg{ii} = [[xv,yv]; [xv(1), yv(1)]];
%     polyReg{ii} = [xv,yv];
%     polyReg{ii} = [[xv,yv]; [xv(1), yv(1)]];
%     cReg{ii} = mpath;
% end
% 
% 
% 
% for ii = 1:npar
%     coarse_sul = union(ii,find(coarseneigh(ii,1:end-4)));
%     fine_test = ismember(elemloc,coarse_sul);
%     center = centelem(coarseElemCenter(ii), 1:2);
%     cflag = inpolygon(center(1), center(2), polyReg{ii}(:,1), polyReg{ii}(:,2));
%     ref =  inpolygon(centelem(fine_test,1), centelem(fine_test,2), polyReg{ii}(:,1), polyReg{ii}(:,2));
%     if cflag == 1
%         fine_test(fine_test) = ref;
%     else
%         fine_test(fine_test) = ~ref;
%     end
%     intRegion{ii} = find(fine_test);
%     
%     
% end



end
% for ii = 1:npar
%     coarse_sul = union(ii,find(coarseneigh(ii,1:end-4)));
%     fine_test = ismember(elemloc,coarse_sul);
%     struct.Data =  polyReg{ii}(1:end-1,:);
%     center = Weiszfeld(struct).xMedian;
%     cflag = inpolygon(center(1), center(2), struct.Data(:,1), struct.Data(:,2)) ;
%     ref =  inpolygon(centelem(fine_test,1), centelem(fine_test,2),struct.Data(:,1), struct.Data(:,2));
%     if cflag == 1
%         fine_test(fine_test) = ref;
%     else
%         fine_test(fine_test) = ~ref;
%     end
%     intRegion{ii} = find(fine_test);
% end
% 1
%  ii = 6
% polyReg{ii} = createPolygon(boundRegion{ii}, coarseElemCenter')
%    [xv,yv, mpath] = createPolygon(boundRegion{ii}, coarseElemCenter');
%    polyReg{ii} = [xv,yv];
%    cReg{ii} = mpath;
% createPolygon(boundRegion{2}, coarseElemCenter')
%createPolygon(boundRegion{5}, find(coarseneigh(5,1:end-4)))


function [xv, yv] = smoothIt(x, y, corner_point, lflag)
    if lflag == true
         x = [x; corner_point(1)];
         y = [y; corner_point(2)];
    end
    j = boundary(x,y,1);
    hold on
    scatter(x,y);
    plot(x(j),y(j), 'LineWidth', 4);
    xv = y(j);
    yv = y(j);
end



function [xv,yv, path] = createPolygon(vol, neighbor_centers, dist)
    global bedge inedge centelem strips
    all_vols = unique([vol, neighbor_centers]);
    ref = all(ismember(inedge(:,3:4), all_vols),2);
    g1 = inedge(ref,3);
    g2 = inedge(ref,4);
    weight = dist(ref);
    pos = unique([g1,g2]);
    target = 1:size(pos,1);
    transvec = zeros(size(centelem,1),1);
    transvec(pos) = target;
    transback = pos;
    G = graph(transvec(g1),transvec(g2), weight);
    graphType = classifyGraph(G)
    path = [];
    
    fr = false;
    
    while fr == false
        fr = true;
        if graphType == 1
            path =  shortestPathLine(G);
        elseif graphType == 2
            path = circleStrip(G);
            
        elseif graphType == 3
            belements = unique(bedge(:,3));
            strips = multiStrip(G);
            path_in_boundary = false(size(strips,1),1);
            m = size(strips,1);
            for ii= 1:m
                if ismember(transback(strips{ii}), belements) == 0
                    path_in_boundary(ii) = true;
                end
            end
            center = strips{1};
            remove_nodes = [];
            for jj = 1:m
                center = intersect(center, strips{jj});
                if path_in_boundary(jj) == true
                    remove_nodes = union(remove_nodes, strips{jj});
                end
            end
            remove_nodes = setdiff(remove_nodes, center);
            F = rmnode(G, remove_nodes);
            transback_local = setdiff(1:max(size(G.adjacency)), remove_nodes);
            path = transback_local(shortestPathLine(F));            
        elseif graphType == 6
           path = findLongest(G);
        elseif (graphType == 4) | (graphType == 5) 
           [F, transback_local] = findCircleStrip(G);
            path = transback_local(circleStrip(findCircleStrip(G)));
        else
            G = findsmallCircles(G);
            fr = false;
            graphType = classifyGraph(G);
            %disp(['Solving unclassified graph'])
        end
    
    end
    path = transback(path);
%     auxvec = [centelem(path, 1:2) ; centelem(path(1), 1:2)]; 
%     xv = auxvec(:,1);
%     yv = auxvec(:,2);
    xv = centelem(path, 1);
    yv = centelem(path, 2);

end


function [path_ac] = findLongest(G)
    nadj = sum(G.adjacency,2);
    ref = find((nadj == 1));
    path_ac = [];
    for ii = 1: size(ref,1)
        for jj = (ii+1):size(ref,1)
            start = ref(ii);
            target = ref(jj);
            path = shortestpath(G,start,target);
            if  size(path,2) > size(path_ac,2)
                path_ac = path;
            end
        end
    end
end


function [H] = cycleSearch(G)
    edges = table2array(G.Edges);   
    p = grCycleBasis(edges);
end

% 
% function [xv, yv] = somoothPolygon(x,y  neigh_centers, corner_point, lflag)
% %     if lflag == true
% %          x = [x; corner_point(1)];
% %          y = [y; corner_point(2)];
% %     end
% %     j = boundary(x,y,f);
% %     hold on
% %     scatter(x,y);
% %     plot(x(j),y(j), 'LineWidth', 4);
% %     xv = y(j);
% %     yv = y(j);

function [H] = findsmallCircles(G)
    adj = G.adjacency;
    edj = table2array(G.Edges);
    edj = edj(:,1:2);
    
    nadj = sum(G.adjacency,2);
    n1 = find(nadj == 1);
    n2 = find(nadj == 2); 
    n3 = find(nadj == 3);
    n4 = find(nadj == 4);
    edj_ref = [];
    target = [];
    for ii=1:size(n3,1)
       for jj = (ii+1):size(n3,1)
            if adj(n3(ii), n3(jj)) == 1
                ref = all(ismember(edj, [n3(ii), n3(jj)]),2);
                edj_ref = [edj_ref; find(ref)];
                target = [target;  [n3(ii), n3(jj)]];
            end
        end
    end
    flag = false(size(edj_ref));
    for ii = 1:size(edj_ref,1)
        F = rmedge(G, edj_ref(ii));
        path = shortestpath(F, target(ii,1), target(ii,2), 'Method','unweighted');
        ledge = table2array(F.Edges);
        ledge = ledge(:,1:2);
        ref = any(ismember(ledge,setdiff(path,target(ii, :))),2);        
        ref(ref) = ~any(ismember(ledge(ref,:), path),2);
        H = rmedge(F, find(ref));
        path_new = shortestpath(H, target(ii,1), target(ii,2), 'Method','unweighted');
        if all(path == path_new)
            flag(ii) = true;
        end
    end
    H = rmedge(G, edj_ref(flag)); 
end

function [path] = shortestPathLine(G)
    count_adj = sum(G.adjacency,2);
    ref = find((count_adj == 1));
    path =  shortestpath(G,ref(1), ref(2));    
end


function [F, transback_local] = findCircleStrip(G)
    nadj = sum(G.adjacency,2);
    ref3 = find(nadj == 3);
    ref1 = find(nadj == 1);
    strips = cell(size(ref1,1),1) ;
    tpsize = 10^10*ones(size(ref1,1),1);
    for ii = 1:size(ref1,1)
        for jj = 1:size(ref1,1)
            path = shortestpath(G, ref1(ii),ref3(jj));
            if size(path,2) <= tpsize(ii)
                strips{ii,1} = setdiff(path, ref3);
                tpsize(ii) = size(path,2);
            end
        end        
    end
    remove_nodes = setdiff(union([strips{:}], []), ref3);
    transback_local = setdiff(1:max(size(G.adjacency)), remove_nodes);
    
%     del_edges = any(ismember(table2array(G.Edges), remove_nodes),2);
    % F = rmedge(G,find(del_edges));
    F= rmnode(G, remove_nodes);
end

function [strips] = multiStrip(G)
    ref = sum(G.adjacency,2);
    m = max(ref);
    center = find(ref == m);
    edges_ends = find(ref == 1);
    strips = cell(m,1);
    for ii = 1:m
       path =  shortestpath(G,center, edges_ends(ii));
       strips{ii} = path;
    end    
end


function [path] = circleStrip(G)
    tedge = G.Edges(1,:);
    tedge = tedge{:,:};
    G = rmedge(G,tedge(1),tedge(2));
    path =  shortestpath(G,tedge(1), tedge(2));
end


function[flag] = classifyGraph(G)
    edges_count = full(sum(G.adjacency,2));
    [a,b]= hist(edges_count,unique(edges_count));
    n = size(G.Nodes,1);
    n1 = 0;
    n2 = 0;
    n3 = 0;
    n4 = 0;
    s = max(size(b));
    for ii = 1:s
        if b(ii) == 1
            n1 = a(ii); 
        elseif b(ii) == 2
            n2 = a(ii);
        elseif b(ii) == 3
            n3 = a(ii);
        else
            n4 = a(ii);
        end
    end
        
    if (n1 == 2) && (n2 == (n-2)) && (n3 == 0)  && (n4 == 0)
    % linear graph
        flag = 1;
    elseif  (n1 == 0) && (n2 == n) && (n3 == 0)  && (n4 == 0) 
    % circular graph
        flag = 2;
    elseif (n1 == 3) && (n2 == (n-4)) && (n3 == 1)  && (n4 == 0) 
    % strip + linear
        flag = 3;
    elseif (n1 == 1) && (n2 == (n-2)) && (n3 == 1)  && (n4 == 0) 
    % circular + strip
        flag = 4;
    elseif (n3 == n1) &&  (n2 ==  (n - 2*n1))
        flag = 5;
    elseif (n1 == 2 + n3 ) &&  (n2 ==  (n - 2*n3 - 2))
        flag = 6; 
    
    else
        % raise error    

        flag = 7;
    end

end

function [out] = minDis(center, points)
    mcenter = repelem(center, size(points,1),1);
    dists = vecnorm(mcenter - points, 2,2);
    ref = dists == min(dists);
    if sum(ref) == 1
        out = ref;
    else        
        pref = false(size(ref,1),1);
        target = find(ref);
        pref(target(1)) = true;
        out = pref;
    end
end